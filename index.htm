<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Iniciar Transmissão</title>
    <style>
        video {
            width: 100%;
            height: auto;
        }
    </style>
</head>
<body>
    <h1>Iniciar Transmissão</h1>
    <button id="start-btn">Iniciar Transmissão</button>
    <video id="myvideo" autoplay playsinline></video>
    <br>
    <label for="viewer-link">Link para espectadores: </label>
    <input type="text" id="viewer-link" readonly />
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const video = document.getElementById('myvideo');
        const startButton = document.getElementById('start-btn');
        const viewerLink = document.getElementById('viewer-link');
        const socket = io("https://index-htm-6c6r.vercel.app"); // URL do servidor WebSocket

        startButton.addEventListener('click', () => {
            navigator.mediaDevices.getUserMedia({ video: true })
                .then((stream) => {
                    video.srcObject = stream;

                    // Gera o link único para os espectadores
                    const viewerRoomLink = window.location.href + "?room=" + generateRoomID();
                    viewerLink.value = viewerRoomLink; // Exibe o link gerado para os espectadores
                    viewerLink.style.color = "blue";
                    viewerLink.style.border = "1px solid blue";

                    // Inicia a transmissão e envia o evento 'host-ready'
                    socket.emit('host-ready');

                    socket.on('watcher', id => {
                        const peerConnection = new RTCPeerConnection({
                            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
                        });

                        peerConnection.addStream(stream);

                        peerConnection.onicecandidate = event => {
                            if (event.candidate) {
                                socket.emit('candidate', id, event.candidate);
                            }
                        };

                        peerConnection.createOffer()
                            .then(sdp => peerConnection.setLocalDescription(sdp))
                            .then(() => socket.emit('offer', id, peerConnection.localDescription));
                    });

                    socket.on('candidate', (id, candidate) => {
                        peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));
                    });

                    socket.on('disconnectPeer', id => {
                        peerConnections[id] && peerConnections[id].close();
                        delete peerConnections[id];
                    });
                })
                .catch((error) => {
                    console.error('Erro ao acessar a câmera: ', error);
                    alert('Não foi possível acessar a câmera.');
                });
        });

        function generateRoomID() {
            return Math.random().toString(36).substr(2, 9); // Gera um ID aleatório para a sala
        }
    </script>
</body>
</html>
