<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transmissão ao Vivo</title>
    <style>
        video {
            width: 100%;
            height: auto;
        }
    </style>
</head>
<body>
    <h1>Iniciar Transmissão</h1>
    <button id="start-btn">Iniciar Transmissão</button>
    <video id="myvideo" autoplay playsinline></video>
    <br>
    <label for="viewer-link">Link para espectadores: </label>
    <input type="text" id="viewer-link" readonly />
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const video = document.getElementById('myvideo');
        const startButton = document.getElementById('start-btn');
        const viewerLink = document.getElementById('viewer-link');
        const socket = io("https://index-htm-6c6r.vercel.app"); // URL do servidor WebSocket

        // Função para acessar a câmera do usuário e iniciar a transmissão
        startButton.addEventListener('click', async () => {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                video.srcObject = stream; // Exibe o vídeo da câmera na página de transmissão

                // Emite o evento 'host-ready' para indicar que a transmissão está pronta
                socket.emit('host-ready');

                // Gera um link único para os espectadores
                const roomID = generateRoomID();
                const viewerUrl = `${window.location.origin}/espectadrosolzeira.html?room=${roomID}`;
                viewerLink.value = viewerUrl; // Exibe o link para os espectadores

                // Emite o evento de 'watcher' para os espectadores se conectarem
                socket.on('watcher', (id) => {
                    const peerConnection = new RTCPeerConnection();
                    peerConnection.addStream(stream); // Adiciona o stream à conexão de peers

                    peerConnection.onicecandidate = (event) => {
                        if (event.candidate) {
                            socket.emit('candidate', id, event.candidate);
                        }
                    };

                    peerConnection.createOffer().then((offer) => {
                        return peerConnection.setLocalDescription(offer);
                    }).then(() => {
                        socket.emit('offer', id, peerConnection.localDescription);
                    });
                });

            } catch (error) {
                console.error('Erro ao acessar a câmera: ', error);
                alert('Não foi possível acessar a câmera.');
            }
        });

        // Função para gerar um ID único para a sala
        function generateRoomID() {
            return Math.random().toString(36).substr(2, 9); // Gera um ID aleatório
        }
    </script>
</body>
</html>
